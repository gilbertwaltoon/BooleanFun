
Starting boolean_parse_tree

_expr


in expr()

in term() calling factor()

_expr
	_term


In value

_expr
	_term
		_value


Name:_value
Parents:[<treenode.TreeNode object at 0x0000022FC225FBC8>]
Children:[]
Data:[]

in factor with pl.current ['var', 'd']

_expr
	_term
		_value
			_factor


in factor() with [num,var]

_expr
	_term
		_value
			_factor
				var,d


factor() returning true

in term

in term2 with pl.current = ['*', ''] 

_expr
	_term
		_value
			_factor
				var,d
		_term2


in term2() with [*,/] calling factor()

In value

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value


Name:_value
Parents:[<treenode.TreeNode object at 0x0000022FC225FE48>]
Children:[]
Data:[]

in factor with pl.current ['var', 'a']

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor


in factor() with [num,var]

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a


factor() returning true

in term2

in term2 with pl.current = ['+', ''] 

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2


in _term2 with [+,-,)] -> EPS, returning True

in expr(), calling expr2()

in expr2() with pl current ['+', ''] 

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2


expr2 got +

in expr2() calling term()

in term() calling factor()

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term


In value

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value


Name:_value
Parents:[<treenode.TreeNode object at 0x0000022FC225F848>]
Children:[]
Data:[]

in term2() with ! calling _factor()

in factor with pl.current ['var', 'b']

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor


in factor() with [num,var]

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b


factor() returning true

in term

in term2 with pl.current = ['*', ''] 

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2


in term2() with [*,/] calling factor()

In value

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value


Name:_value
Parents:[<treenode.TreeNode object at 0x0000022FC225F788>]
Children:[]
Data:[]

in factor with pl.current ['(', '']

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor


in factor() with ( calling expr

in expr()

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr


in term() calling factor()

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr
								_term


In value

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr
								_term
									_value


Name:_value
Parents:[<treenode.TreeNode object at 0x0000022FC2215BC8>]
Children:[]
Data:[]

in factor with pl.current ['var', 'c']

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr
								_term
									_value
										_factor


in factor() with [num,var]

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr
								_term
									_value
										_factor
											var,c


factor() returning true

in term

in term2 with pl.current = [')', ''] 

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr
								_term
									_value
										_factor
											var,c
									_term2


in _term2 with [+,-,)] -> EPS, returning True

in expr(), calling expr2()

in expr2() with pl current [')', ''] 

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr
								_term
									_value
										_factor
											var,c
									_term2
								_expr2


in expr2 with [),None]

_expr returning true

in _factor. expr returned pl.current [')', '']

in factor with ), returning True

in term2

in term2 with pl.current = [None] 

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr
								_term
									_value
										_factor
											var,c
									_term2
								_expr2
							)
				_term2


in _term2 with [+,-,)] -> EPS, returning True

in expr2() calling expr2()

in expr2() with pl current [None] 

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr
								_term
									_value
										_factor
											var,c
									_term2
								_expr2
							)
				_term2
		_expr2


in expr2 with [),None]

_expr returning true

Leaving

_expr
	_term
		_value
			_factor
				var,d
		_term2
			*
			_value
				_factor
					var,a
			_term2
	_expr2
		+
		_term
			_value
				!
					_factor
						var,b
			_term2
				*
				_value
					_factor
						(
							_expr
								_term
									_value
										_factor
											var,c
									_term2
								_expr2
							)
				_term2
		_expr2


_ast called with_expr

_expr node, removing child _term

_expr node, removing child _expr2

_ast called with_value

_value, removing child _factor

_ast called withvar,d

_ast called with_term2
